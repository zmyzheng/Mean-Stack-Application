ng new MeanFrontend
npm install bootstrap@3 jquery --save

express MeanBackend

brew intall mongodb

mkdir MeanMongoDB/data

mongod --dbpath=MeanMongoDB/data

npm install --save mongoose

npm install --save mongoose-unique-validator

npm install --save bcryptjs

npm install --save jsonwebtoken

-------------------------------------------------------------------------------------
不同component之间通信用emit ：
见新课程第23节 虽然例子有些不恰当，混合了外围component给子component传数据
        ： 如创建message和list message的component之间，发送端用EventEmitter和@Output 
        @Output是使外部能用这个变量
        在post-create.component.ts中写
        @Output() postCreated = new EventEmitter<Post>(); 
        onAddPost() {this.postCreated.emit(post);}
        app.component.ts接收它，在app.component.html中写：
        <app-post-create (postCreated) = "addToPosts($event)"></app-post-create>
        其中addToPosts(post)是app.component.ts中的方法

有公用引用型数据用service，即使不是引用型也可以用service，引用型也要建立深拷贝，见这个文档的Observable部分

公用值型数据用localStorage

外围component给子component传数据用属性绑定
    见新课程第23节 如：
    post-list.component.ts写
    @Input() posts = [];
    在app.component.html中写
    <app-post-list [posts]="storedPosts"></app-post-list>
    storedPosts来自app.component.ts

------------------------------------------------------------------------------------

These are the core template binding features angular has, event binding, string interpolation, property binding and two-way binding.

------------------------------------------------------------------------------------

model用interface，定义格式但不能被初始化,初始化还用大括号的形式

-------------------------------------------------------------------------------------

form 的两种写法：
（type="submit"的button会trigger一个submit Event）
(可以加required在input中，这是HTML5的特性，与Angular无关)

<form (submit)="onSubmitForm()">
    <input name="tittle" [(ngModel)] = "post.tittle">
    <button type="submit"></button>
</form>

onSubmitForm() {
    send(post);
}

好处是可以给它赋初值，因为ngModel只是注册成一个control，[ngModel] = "post.tittle"就可以赋值了，是否要小括号待研究

解决field没有初值时post.tittle报类似空指针异常的问题，可以用post?.tittle
-------------
<form (submit)="onSubmitForm(postForm)"  #postForm="ngForm">
    <input name="tittle" ngModel>
    <button type="submit"></button>
</form>

onSubmitForm(form: NgForm) {
    if(form.invalid) {
    return;
    }
    const post: Post = {
        title: form.value.title
    }
    send(post);
} 
好处是可以this.form.reset();
--------------

-------------------------------------------------------------------------------------

constructor中的 postService 必须要是public的才会创建field

-------------------------------------------------------------------------------------
添加service的两种方式：
（1） @Injectable() 作为service的注解，然后在module添加providers
（2）@Injectable({providedIn: 'root'})

-------------------------------------------------------------------------------------

一个好的习惯是获取posts对象的class不应该能操纵对象，所以不应该把引用的值传给获取posts的对象，而应该给它提供一个深拷贝return [...this.posts]; 见27节，
然后就要解决一个问题，posts更新之后如何让获取posts的对象(post-list)知道，方法是需要用到Observable和Subject。见27节
但这种方法的问题是当订阅它的对象不在DOM中后还在订阅，导致内存泄漏，解决方法是建立一个Subscription对象，当不在DOM中时（onDistroy)取消订阅，见27节最后的部分

for all built-in observables, we never need to unsubscribe
如this.route.paramMap.subscribe

-------------------------------------------------------------------------------------

Routing:
(1) app-routing.module.ts
(2) routerLink = "/create"
(3) routerLinkActive 高亮link
(4) this.router.navigate(["/"]);


获取路径信息：ActivedRoute，见post-create.component.ts区分add post和修改post
这时routerLink要写成[routerLink]以使得这个路径能被component内获取到，见post-list.component.html中的[routerLink]="['/edit', post.id]"




-------------------------------------------------------------------------------------
如果ts中的field需要被HTML访问，不能是private的，如果什么都不写默认是public的



